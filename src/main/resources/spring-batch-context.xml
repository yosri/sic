<beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:batch="http://www.springframework.org/schema/batch" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="http://www.springframework.org/schema/batch http://www.springframework.org/schema/batch/spring-batch-3.0.xsd
        http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.0.xsd">
 
    <import resource="classpath:context-datasource.xml"/>
 
    <!-- JobRepository and JobLauncher are configuration/setup classes  -->
    <bean id="jobRepository" class="org.springframework.batch.core.repository.support.MapJobRepositoryFactoryBean" />
 
    <bean id="jobLauncher"   class="org.springframework.batch.core.launch.support.SimpleJobLauncher">
        <property name="jobRepository" ref="jobRepository" />
    </bean>
 
    <!-- ItemReader which reads data from XML file -->
    <!-- <bean id="mirReader" class="testYAR.testSpringBatch.SngcFileItemReader" /> -->
    	<!-- <property name="resource" value="file:#{jobParameters['inputFileName']}" />
    </bean> -->
    <bean id="mirReader" class="org.springframework.batch.item.file.FlatFileItemReader" scope="step">
	    <property name="resource" value="file:#{jobParameters['inputFileName']}" />
	    <property name="lineMapper">
	        <bean class="org.springframework.batch.item.file.mapping.DefaultLineMapper">
	            <property name="lineTokenizer">
	                <bean class="org.springframework.batch.item.file.transform.FixedLengthTokenizer">
	                    <property name="names" value="typeEnregistrement, typeIdAssure, numSecuriteSociale, nomAssure, codeFonction, codeMaj, annee, codeNatureTrim, nombreUniteValide, codeRegimeValide, numOrganismeOrigineDeclarant, dateOrigineDeclaration, typeUnitesValidees, typeTitreEchange, codeReponse, numCotisantPartenaire, prenom, codeAnomalie" />
	                    <property name="columns" value="1-3, 4-4, 5-17, 18-47, 48-51, 52-52, 53-56, 57-58, 59-60, 61-65, 66-69, 70-77, 78-78, 79-80, 92-92, 93-108, 109-118, 121-140" />
	                </bean>
	            </property>
	            <property name="fieldSetMapper">
	                <bean class="org.springframework.batch.item.file.mapping.BeanWrapperFieldSetMapper">
	                    <property name="targetType" value="testYAR.testSpringBatch.model.sngc.SngcMirTrim" />
	                </bean>
	            </property>
	        </bean>
	    </property>
	</bean>
 
    <!-- ItemWriter which writes data to database -->
    <bean id="mirJdbcWriter" class="testYAR.testSpringBatch.MirJdbcWriter" >
	    <property name="jdbcTemplate" ref="idJdbcTemplate" />
	</bean>
	<bean id="idJdbcTemplate" class="org.springframework.jdbc.core.JdbcTemplate" >
		<property name="dataSource" ref="idDataSource" />
	</bean>
 
    <!-- Optional ItemProcessor to perform business logic/filtering on the input records -->
    <bean id="mirProcessor" class="testYAR.testSpringBatch.MirProcessor" />
 
    <!-- Optional JobExecutionListener to perform business logic before and after the job -->
    <!-- <bean id="jobListener" class="com.websystique.springbatch.ExamResultJobListener" /> -->
 
    <!-- Step will need a transaction manager -->
    <bean id="transactionManager" class="org.springframework.batch.support.transaction.ResourcelessTransactionManager" />
 
 	<bean id="listner" class="testYAR.testSpringBatch.SngcItemReaderListener" />
    <!-- Actual Job -->
   <job id="importMir" xmlns="http://www.springframework.org/schema/batch">
	    <step id="readWriteMir">
	        <tasklet>
			    <listeners>
					<listener ref="listner" />
				</listeners>
	            <chunk reader="mirReader" writer="mirJdbcWriter" processor="mirProcessor" commit-interval="600" skip-limit="100000000">
		            <skippable-exception-classes>
			            <batch:include class="org.springframework.batch.item.file.FlatFileParseException"/>
			        </skippable-exception-classes>
		        </chunk>
	        </tasklet>
	    </step>
	</job>
</beans>